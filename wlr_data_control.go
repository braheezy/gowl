// Generated by go-wayland-scanner
// https://github.com/rajveermalviya/go-wayland/cmd/go-wayland-scanner
// XML file : https://raw.githubusercontent.com/bugaevc/wl-clipboard/master/src/protocol/wlr-data-control-unstable-v1.xml
//
// wlr_data_control_unstable_v1 Protocol Copyright:
//
// Copyright © 2018 Simon Ser
// Copyright © 2019 Ivan Molodetskikh
//
// Permission to use, copy, modify, distribute, and sell this
// software and its documentation for any purpose is hereby granted
// without fee, provided that the above copyright notice appear in
// all copies and that both that copyright notice and this permission
// notice appear in supporting documentation, and that the name of
// the copyright holders not be used in advertising or publicity
// pertaining to distribution of the software without specific,
// written prior permission.  The copyright holders make no
// representations about the suitability of this software for any
// purpose.  It is provided "as is" without express or implied
// warranty.
//
// THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
// SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
// SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
// AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
// ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
// THIS SOFTWARE.

package main

import (
	"github.com/rajveermalviya/go-wayland/wayland/client"
	"golang.org/x/sys/unix"
)

// ZwlrDataControlManagerV1 : manager to control data devices
//
// This interface is a manager that allows creating per-seat data device
// controls.
type ZwlrDataControlManagerV1 struct {
	client.BaseProxy
	Version uint32
}

// NewZwlrDataControlManagerV1 : manager to control data devices
//
// This interface is a manager that allows creating per-seat data device
// controls.
func NewZwlrDataControlManagerV1(ctx *client.Context) *ZwlrDataControlManagerV1 {
	zwlrDataControlManagerV1 := &ZwlrDataControlManagerV1{}
	ctx.Register(zwlrDataControlManagerV1)
	return zwlrDataControlManagerV1
}

// CreateDataSource : create a new data source
//
// Create a new data source.
func (i *ZwlrDataControlManagerV1) CreateDataSource() (*ZwlrDataControlSourceV1, error) {
	id := NewZwlrDataControlSourceV1(i.Context())
	const opcode = 0
	const _reqBufLen = 8 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], id.ID())
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return id, err
}

// GetDataDevice : get a data device for a seat
//
// Create a data device that can be used to manage a seat's selection.
func (i *ZwlrDataControlManagerV1) GetDataDevice(seat *client.Seat) (*ZwlrDataControlDeviceV1, error) {
	id := NewZwlrDataControlDeviceV1(i.Context())
	const opcode = 1
	const _reqBufLen = 8 + 4 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutUint32(_reqBuf[l:l+4], id.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], seat.ID())
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return id, err
}

// Destroy : destroy the manager
//
// All objects created by the manager will still remain valid, until their
// appropriate destroy request has been called.
func (i *ZwlrDataControlManagerV1) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 2
	const _reqBufLen = 8
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// ZwlrDataControlDeviceV1 : manage a data device for a seat
//
// This interface allows a client to manage a seat's selection.
//
// When the seat is destroyed, this object becomes inert.
type ZwlrDataControlDeviceV1 struct {
	client.BaseProxy
	dataOfferHandler        ZwlrDataControlDeviceV1DataOfferHandlerFunc
	selectionHandler        ZwlrDataControlDeviceV1SelectionHandlerFunc
	finishedHandler         ZwlrDataControlDeviceV1FinishedHandlerFunc
	primarySelectionHandler ZwlrDataControlDeviceV1PrimarySelectionHandlerFunc
}

// NewZwlrDataControlDeviceV1 : manage a data device for a seat
//
// This interface allows a client to manage a seat's selection.
//
// When the seat is destroyed, this object becomes inert.
func NewZwlrDataControlDeviceV1(ctx *client.Context) *ZwlrDataControlDeviceV1 {
	zwlrDataControlDeviceV1 := &ZwlrDataControlDeviceV1{}
	ctx.Register(zwlrDataControlDeviceV1)
	return zwlrDataControlDeviceV1
}

// SetSelection : copy data to the selection
//
// This request asks the compositor to set the selection to the data from
// the source on behalf of the client.
//
// The given source may not be used in any further set_selection or
// set_primary_selection requests. Attempting to use a previously used
// source is a protocol error.
//
// To unset the selection, set the source to NULL.
func (i *ZwlrDataControlDeviceV1) SetSelection(source *ZwlrDataControlSourceV1) error {
	const opcode = 0
	const _reqBufLen = 8 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	if source == nil {
		client.PutUint32(_reqBuf[l:l+4], 0)
		l += 4
	} else {
		client.PutUint32(_reqBuf[l:l+4], source.ID())
		l += 4
	}
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// Destroy : destroy this data device
//
// Destroys the data device object.
func (i *ZwlrDataControlDeviceV1) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 1
	const _reqBufLen = 8
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// SetPrimarySelection : copy data to the primary selection
//
// This request asks the compositor to set the primary selection to the
// data from the source on behalf of the client.
//
// The given source may not be used in any further set_selection or
// set_primary_selection requests. Attempting to use a previously used
// source is a protocol error.
//
// To unset the primary selection, set the source to NULL.
//
// The compositor will ignore this request if it does not support primary
// selection.
func (i *ZwlrDataControlDeviceV1) SetPrimarySelection(source *ZwlrDataControlSourceV1) error {
	const opcode = 2
	const _reqBufLen = 8 + 4
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	if source == nil {
		client.PutUint32(_reqBuf[l:l+4], 0)
		l += 4
	} else {
		client.PutUint32(_reqBuf[l:l+4], source.ID())
		l += 4
	}
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

type ZwlrDataControlDeviceV1Error uint32

// ZwlrDataControlDeviceV1Error :
const (
	// ZwlrDataControlDeviceV1ErrorUsedSource : source given to set_selection or set_primary_selection was already used before
	ZwlrDataControlDeviceV1ErrorUsedSource ZwlrDataControlDeviceV1Error = 1
)

func (e ZwlrDataControlDeviceV1Error) Name() string {
	switch e {
	case ZwlrDataControlDeviceV1ErrorUsedSource:
		return "used_source"
	default:
		return ""
	}
}

func (e ZwlrDataControlDeviceV1Error) Value() string {
	switch e {
	case ZwlrDataControlDeviceV1ErrorUsedSource:
		return "1"
	default:
		return ""
	}
}

func (e ZwlrDataControlDeviceV1Error) String() string {
	return e.Name() + "=" + e.Value()
}

// ZwlrDataControlDeviceV1DataOfferEvent : introduce a new wlr_data_control_offer
//
// The data_offer event introduces a new wlr_data_control_offer object,
// which will subsequently be used in either the
// wlr_data_control_device.selection event (for the regular clipboard
// selections) or the wlr_data_control_device.primary_selection event (for
// the primary clipboard selections). Immediately following the
// wlr_data_control_device.data_offer event, the new data_offer object
// will send out wlr_data_control_offer.offer events to describe the MIME
// types it offers.
type ZwlrDataControlDeviceV1DataOfferEvent struct {
	Id *ZwlrDataControlOfferV1
}
type ZwlrDataControlDeviceV1DataOfferHandlerFunc func(ZwlrDataControlDeviceV1DataOfferEvent)

// SetDataOfferHandler : sets handler for ZwlrDataControlDeviceV1DataOfferEvent
func (i *ZwlrDataControlDeviceV1) SetDataOfferHandler(f ZwlrDataControlDeviceV1DataOfferHandlerFunc) {
	i.dataOfferHandler = f
}

// ZwlrDataControlDeviceV1SelectionEvent : advertise new selection
//
// The selection event is sent out to notify the client of a new
// wlr_data_control_offer for the selection for this device. The
// wlr_data_control_device.data_offer and the wlr_data_control_offer.offer
// events are sent out immediately before this event to introduce the data
// offer object. The selection event is sent to a client when a new
// selection is set. The wlr_data_control_offer is valid until a new
// wlr_data_control_offer or NULL is received. The client must destroy the
// previous selection wlr_data_control_offer, if any, upon receiving this
// event.
//
// The first selection event is sent upon binding the
// wlr_data_control_device object.
type ZwlrDataControlDeviceV1SelectionEvent struct {
	Id *ZwlrDataControlOfferV1
}
type ZwlrDataControlDeviceV1SelectionHandlerFunc func(ZwlrDataControlDeviceV1SelectionEvent)

// SetSelectionHandler : sets handler for ZwlrDataControlDeviceV1SelectionEvent
func (i *ZwlrDataControlDeviceV1) SetSelectionHandler(f ZwlrDataControlDeviceV1SelectionHandlerFunc) {
	i.selectionHandler = f
}

// ZwlrDataControlDeviceV1FinishedEvent : this data control is no longer valid
//
// This data control object is no longer valid and should be destroyed by
// the client.
type ZwlrDataControlDeviceV1FinishedEvent struct{}
type ZwlrDataControlDeviceV1FinishedHandlerFunc func(ZwlrDataControlDeviceV1FinishedEvent)

// SetFinishedHandler : sets handler for ZwlrDataControlDeviceV1FinishedEvent
func (i *ZwlrDataControlDeviceV1) SetFinishedHandler(f ZwlrDataControlDeviceV1FinishedHandlerFunc) {
	i.finishedHandler = f
}

// ZwlrDataControlDeviceV1PrimarySelectionEvent : advertise new primary selection
//
// The primary_selection event is sent out to notify the client of a new
// wlr_data_control_offer for the primary selection for this device. The
// wlr_data_control_device.data_offer and the wlr_data_control_offer.offer
// events are sent out immediately before this event to introduce the data
// offer object. The primary_selection event is sent to a client when a
// new primary selection is set. The wlr_data_control_offer is valid until
// a new wlr_data_control_offer or NULL is received. The client must
// destroy the previous primary selection wlr_data_control_offer, if any,
// upon receiving this event.
//
// If the compositor supports primary selection, the first
// primary_selection event is sent upon binding the
// wlr_data_control_device object.
type ZwlrDataControlDeviceV1PrimarySelectionEvent struct {
	Id *ZwlrDataControlOfferV1
}
type ZwlrDataControlDeviceV1PrimarySelectionHandlerFunc func(ZwlrDataControlDeviceV1PrimarySelectionEvent)

// SetPrimarySelectionHandler : sets handler for ZwlrDataControlDeviceV1PrimarySelectionEvent
func (i *ZwlrDataControlDeviceV1) SetPrimarySelectionHandler(f ZwlrDataControlDeviceV1PrimarySelectionHandlerFunc) {
	i.primarySelectionHandler = f
}

func (i *ZwlrDataControlDeviceV1) Dispatch(opcode uint32, fd int, data []byte) {
	switch opcode {
	case 0:
		if i.dataOfferHandler == nil {
			return
		}
		var e ZwlrDataControlDeviceV1DataOfferEvent
		l := 0
		e.Id = i.Context().GetProxy(client.Uint32(data[l : l+4])).(*ZwlrDataControlOfferV1)
		l += 4

		i.dataOfferHandler(e)
	case 1:
		if i.selectionHandler == nil {
			return
		}
		var e ZwlrDataControlDeviceV1SelectionEvent
		l := 0
		e.Id = i.Context().GetProxy(client.Uint32(data[l : l+4])).(*ZwlrDataControlOfferV1)
		l += 4

		i.selectionHandler(e)
	case 2:
		if i.finishedHandler == nil {
			return
		}
		var e ZwlrDataControlDeviceV1FinishedEvent

		i.finishedHandler(e)
	case 3:
		if i.primarySelectionHandler == nil {
			return
		}
		var e ZwlrDataControlDeviceV1PrimarySelectionEvent
		l := 0
		e.Id = i.Context().GetProxy(client.Uint32(data[l : l+4])).(*ZwlrDataControlOfferV1)
		l += 4

		i.primarySelectionHandler(e)
	}
}

// ZwlrDataControlSourceV1 : offer to transfer data
//
// The wlr_data_control_source object is the source side of a
// wlr_data_control_offer. It is created by the source client in a data
// transfer and provides a way to describe the offered data and a way to
// respond to requests to transfer the data.
type ZwlrDataControlSourceV1 struct {
	client.BaseProxy
	sendHandler      ZwlrDataControlSourceV1SendHandlerFunc
	cancelledHandler ZwlrDataControlSourceV1CancelledHandlerFunc
}

// NewZwlrDataControlSourceV1 : offer to transfer data
//
// The wlr_data_control_source object is the source side of a
// wlr_data_control_offer. It is created by the source client in a data
// transfer and provides a way to describe the offered data and a way to
// respond to requests to transfer the data.
func NewZwlrDataControlSourceV1(ctx *client.Context) *ZwlrDataControlSourceV1 {
	zwlrDataControlSourceV1 := &ZwlrDataControlSourceV1{}
	ctx.Register(zwlrDataControlSourceV1)
	return zwlrDataControlSourceV1
}

// Offer : add an offered MIME type
//
// This request adds a MIME type to the set of MIME types advertised to
// targets. Can be called several times to offer multiple types.
//
// Calling this after wlr_data_control_device.set_selection is a protocol
// error.
//
//	mimeType: MIME type offered by the data source
func (i *ZwlrDataControlSourceV1) Offer(mimeType string) error {
	const opcode = 0
	mimeTypeLen := client.PaddedLen(len(mimeType) + 1)
	_reqBufLen := 8 + (4 + mimeTypeLen)
	_reqBuf := make([]byte, _reqBufLen)
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutString(_reqBuf[l:l+(4+mimeTypeLen)], mimeType, mimeTypeLen)
	l += (4 + mimeTypeLen)
	err := i.Context().WriteMsg(_reqBuf, nil)
	return err
}

// Destroy : destroy this source
//
// Destroys the data source object.
func (i *ZwlrDataControlSourceV1) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 1
	const _reqBufLen = 8
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

type ZwlrDataControlSourceV1Error uint32

// ZwlrDataControlSourceV1Error :
const (
	// ZwlrDataControlSourceV1ErrorInvalidOffer : offer sent after wlr_data_control_device.set_selection
	ZwlrDataControlSourceV1ErrorInvalidOffer ZwlrDataControlSourceV1Error = 1
)

func (e ZwlrDataControlSourceV1Error) Name() string {
	switch e {
	case ZwlrDataControlSourceV1ErrorInvalidOffer:
		return "invalid_offer"
	default:
		return ""
	}
}

func (e ZwlrDataControlSourceV1Error) Value() string {
	switch e {
	case ZwlrDataControlSourceV1ErrorInvalidOffer:
		return "1"
	default:
		return ""
	}
}

func (e ZwlrDataControlSourceV1Error) String() string {
	return e.Name() + "=" + e.Value()
}

// ZwlrDataControlSourceV1SendEvent : send the data
//
// Request for data from the client. Send the data as the specified MIME
// type over the passed file descriptor, then close it.
type ZwlrDataControlSourceV1SendEvent struct {
	MimeType string
	Fd       int
}
type ZwlrDataControlSourceV1SendHandlerFunc func(ZwlrDataControlSourceV1SendEvent)

// SetSendHandler : sets handler for ZwlrDataControlSourceV1SendEvent
func (i *ZwlrDataControlSourceV1) SetSendHandler(f ZwlrDataControlSourceV1SendHandlerFunc) {
	i.sendHandler = f
}

// ZwlrDataControlSourceV1CancelledEvent : selection was cancelled
//
// This data source is no longer valid. The data source has been replaced
// by another data source.
//
// The client should clean up and destroy this data source.
type ZwlrDataControlSourceV1CancelledEvent struct{}
type ZwlrDataControlSourceV1CancelledHandlerFunc func(ZwlrDataControlSourceV1CancelledEvent)

// SetCancelledHandler : sets handler for ZwlrDataControlSourceV1CancelledEvent
func (i *ZwlrDataControlSourceV1) SetCancelledHandler(f ZwlrDataControlSourceV1CancelledHandlerFunc) {
	i.cancelledHandler = f
}

func (i *ZwlrDataControlSourceV1) Dispatch(opcode uint32, fd int, data []byte) {
	switch opcode {
	case 0:
		if i.sendHandler == nil {
			if fd != -1 {
				unix.Close(fd)
			}
			return
		}
		var e ZwlrDataControlSourceV1SendEvent
		l := 0
		mimeTypeLen := client.PaddedLen(int(client.Uint32(data[l : l+4])))
		l += 4
		e.MimeType = client.String(data[l : l+mimeTypeLen])
		l += mimeTypeLen
		e.Fd = fd

		i.sendHandler(e)
	case 1:
		if i.cancelledHandler == nil {
			return
		}
		var e ZwlrDataControlSourceV1CancelledEvent

		i.cancelledHandler(e)
	}
}

// ZwlrDataControlOfferV1 : offer to transfer data
//
// A wlr_data_control_offer represents a piece of data offered for transfer
// by another client (the source client). The offer describes the different
// MIME types that the data can be converted to and provides the mechanism
// for transferring the data directly from the source client.
type ZwlrDataControlOfferV1 struct {
	client.BaseProxy
	offerHandler ZwlrDataControlOfferV1OfferHandlerFunc
}

// NewZwlrDataControlOfferV1 : offer to transfer data
//
// A wlr_data_control_offer represents a piece of data offered for transfer
// by another client (the source client). The offer describes the different
// MIME types that the data can be converted to and provides the mechanism
// for transferring the data directly from the source client.
func NewZwlrDataControlOfferV1(ctx *client.Context) *ZwlrDataControlOfferV1 {
	zwlrDataControlOfferV1 := &ZwlrDataControlOfferV1{}
	ctx.Register(zwlrDataControlOfferV1)
	return zwlrDataControlOfferV1
}

// Receive : request that the data is transferred
//
// To transfer the offered data, the client issues this request and
// indicates the MIME type it wants to receive. The transfer happens
// through the passed file descriptor (typically created with the pipe
// system call). The source client writes the data in the MIME type
// representation requested and then closes the file descriptor.
//
// The receiving client reads from the read end of the pipe until EOF and
// then closes its end, at which point the transfer is complete.
//
// This request may happen multiple times for different MIME types.
//
//	mimeType: MIME type desired by receiver
//	fd: file descriptor for data transfer
func (i *ZwlrDataControlOfferV1) Receive(mimeType string, fd int) error {
	const opcode = 0
	mimeTypeLen := client.PaddedLen(len(mimeType) + 1)
	_reqBufLen := 8 + (4 + mimeTypeLen)
	_reqBuf := make([]byte, _reqBufLen)
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	client.PutString(_reqBuf[l:l+(4+mimeTypeLen)], mimeType, mimeTypeLen)
	l += (4 + mimeTypeLen)
	oob := unix.UnixRights(int(fd))
	err := i.Context().WriteMsg(_reqBuf, oob)
	return err
}

// Destroy : destroy this offer
//
// Destroys the data offer object.
func (i *ZwlrDataControlOfferV1) Destroy() error {
	defer i.Context().Unregister(i)
	const opcode = 1
	const _reqBufLen = 8
	var _reqBuf [_reqBufLen]byte
	l := 0
	client.PutUint32(_reqBuf[l:4], i.ID())
	l += 4
	client.PutUint32(_reqBuf[l:l+4], uint32(_reqBufLen<<16|opcode&0x0000ffff))
	l += 4
	err := i.Context().WriteMsg(_reqBuf[:], nil)
	return err
}

// ZwlrDataControlOfferV1OfferEvent : advertise offered MIME type
//
// Sent immediately after creating the wlr_data_control_offer object.
// One event per offered MIME type.
type ZwlrDataControlOfferV1OfferEvent struct {
	MimeType string
}
type ZwlrDataControlOfferV1OfferHandlerFunc func(ZwlrDataControlOfferV1OfferEvent)

// SetOfferHandler : sets handler for ZwlrDataControlOfferV1OfferEvent
func (i *ZwlrDataControlOfferV1) SetOfferHandler(f ZwlrDataControlOfferV1OfferHandlerFunc) {
	i.offerHandler = f
}

func (i *ZwlrDataControlOfferV1) Dispatch(opcode uint32, fd int, data []byte) {
	switch opcode {
	case 0:
		if i.offerHandler == nil {
			return
		}
		var e ZwlrDataControlOfferV1OfferEvent
		l := 0
		mimeTypeLen := client.PaddedLen(int(client.Uint32(data[l : l+4])))
		l += 4
		e.MimeType = client.String(data[l : l+mimeTypeLen])
		l += mimeTypeLen

		i.offerHandler(e)
	}
}
